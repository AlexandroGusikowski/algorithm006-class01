/*
 * @lc app=leetcode.cn id=21 lang=c
 *
 * [21] 合并两个有序链表
 */

// @lc code=start
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

// 解法一 迭代
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){
    if(!l1 || !l2) {
        return l1 == NULL ? l2 : l1;
    }
    struct ListNode *head = NULL;
    if(l1 -> val < l2 -> val) {
        head = l1;
        l1 = l1 -> next;
    }
    else {
        head = l2;
        l2 = l2 -> next;
    }
    struct ListNode *p = head;
    while(l1 || l2) {
        if(!l1) {
            p -> next = l2;
            break;
        }
        else if(!l2) {
            p -> next = l1;
            break;
        }
        else if(l1 -> val < l2 -> val) {
            p -> next = l1;
            p = p -> next;
            l1 = l1 -> next;
        }
        else {
            p -> next = l2;
            p = p -> next;
            l2 = l2 -> next;
        }
    }
    return head;
}


// 解法二 递归
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){
    if(!l1) {
        return l2;
    }
    else if(!l2) {
        return l1;
    }
    else if(l1 -> val < l2 -> val) {
        l1 -> next = mergeTwoLists(l1 -> next, l2);
        return l1;
    }
    else {
        l2 -> next = mergeTwoLists(l1, l2 -> next);
        return l2;
    }
}