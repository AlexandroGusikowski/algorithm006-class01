    JDK1.8 HashMap

 JDK1.8HashMap底层是由数组加链表以及红黑树实现的

 数组默认长度为16，扩容因子0.75f

 当数组存储发生hash碰撞，碰撞的元素用链表存储

 链表长度为8时，添加第九个元素时，链表转为红黑树

 只有当数组长度大于64的时候才会进行转换，否则，就算链表长度大于8也不会转换

 当红黑节点数小于6的时候转换为链表形式
 HashMap添加方法：
 1.首先判断插入的key值是否为空，如果为空，因为HashMap允许存入空值，但是只能存储一个key为空的值，这个key-value存储到下标为0的位置
 2.如果key不为空，就放到数组中，用hash值寻找下标，如果该位置为空，则在该位置添加该key-value
 3.如果该位置有值了，则发生了hash碰撞，需要先去红黑树中寻找，遍历，看是否为红黑树中的节点，如果存在，并且key也相等，则覆盖值
 4.如果红黑树中也没有，则去链表中遍历寻找，找到了与之相等的节点以及key相等，则覆盖
 5.如果没有找到，则在链表后面添加该key-value值

 HashMap查找方法：
 如果key为空，则看看数组下标为0的key是否为空，如果为空就返回下标为0位置的value，如果不为零就返回null
 如果key不为空，先去数组里面遍历查找，如果存在就返回value
 如果数组里没有，就去红黑树里查找，判断该节点是否属于红黑树，如果有就返回value
 如果红黑树里也没有，就去链表中遍历查询，如果有就返回value
 如果链表中也没有，就返回null


