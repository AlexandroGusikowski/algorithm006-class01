package G20200343030379;

/**
 * 190. 颠倒二进制位
 *
 * 颠倒给定的 32 位无符号整数的二进制位。
 *
 * ?
 *
 * 示例 1：
 *
 * 输入: 00000010100101000001111010011100
 * 输出: 00111001011110000010100101000000
 * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 *       因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 * 示例 2：
 *
 * 输入：11111111111111111111111111111101
 * 输出：10111111111111111111111111111111
 * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 * ?     因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。
 * ?
 *
 * 提示：
 *
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的?示例 2?中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/reverse-bits
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * 参考优秀题解：
 */
public class LeetCode_190_379 {

    public static void main(String[] args) {
        //十进制转二进制
        //String s = Integer.toBinaryString(-2147483648);
        new LeetCode_190_379().reverseBits(43261596);
    }

    /**
     * 执行用时 : 1 ms , 在所有 Java 提交中击败了 100.00% 的用户
     * 内存消耗 : 37.9 MB , 在所有 Java 提交中击败了 5.27% 的用户
     * 优秀题解：https://leetcode-cn.com/problems/reverse-bits/solution/js-ban-shao-shao-xiu-gai-ji-ke-by-kimigao/
     * @param n
     * @return
     */
    public int reverseBits(int n) {
        int ans=0;
        for (int i = 0; i < 32; i++) {
           // System.out.print("ans<<1===="+Integer.toBinaryString(ans<<1)+"   ======ans   ");
            ans= (ans<<1) + (n&1);
          //  System.out.println(Integer.toBinaryString(ans)+"   ======n&1    "+Integer.toBinaryString(n&1)+"   ======n    "+Integer.toBinaryString(n));
            n = n >>1;
        }
        //无符号右移，正数左边补0，负数左边补0
        return ans >>>0;

    }

    /**
     * 执行用时 : 1 ms , 在所有 Java 提交中击败了 100.00% 的用户
     * 内存消耗 : 37.7 MB , 在所有 Java 提交中击败了 5.27% 的用户
     * 优秀题解：https://leetcode-cn.com/problems/reverse-bits/solution/shu-xue-si-xiang-by-lo_e-2/
     * @param n
     * @return
     */
    public int reverseBits2(int n) {
        int reverse=0;
        int i=0;
        while(i<=31){
            reverse = reverse<<1;
            reverse |= (n & 1);
            n = n >> 1;
            i++;
        }
        return reverse;
    }


}
